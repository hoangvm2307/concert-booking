version: "3.8"

services:
  mongodb:
    image: mongo:latest
    container_name: concertbooking_mongo
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    networks:
      - concert_network

  redis:
    image: redis:latest
    container_name: concertbooking_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - concert_network

  authservice:
    container_name: concertbooking_auth_service
    build:
      context: ./src/AuthService
      dockerfile: Dockerfile
    ports:
      - "5001:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:8080
      - MongoDbSettings__ConnectionString=mongodb://mongodb:27017
      - MongoDbSettings__DatabaseName=AuthDB
      - JwtSettings__Key=$2y$10$4IOQmxzFKEGs/.n90bpF6eki.ZNM4XbZkjLhyC2fULFinrN831c1q
      - JwtSettings__Issuer=http://authservice:8080
      - JwtSettings__Audience=http://concertbooking_api
    depends_on:
      - mongodb
    networks:
      - concert_network

  concertservice:
    container_name: concertbooking_concert_service
    build:
      context: ./src/ConcertService
      dockerfile: Dockerfile
    ports:
      - "5002:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:8080

    depends_on:
      - mongodb
      - redis
    networks:
      - concert_network

  bookingservice:
    container_name: concertbooking_booking_service
    build:
      context: ./src/BookingService
      dockerfile: Dockerfile
    ports:
      - "5003:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:8080
    depends_on:
      - mongodb
      - redis
      - authservice
    networks:
      - concert_network

networks:
  concert_network:
    driver: bridge

volumes:
  mongo_data:
    driver: local
  redis_data:
    driver: local
